<?php

/**
 * Implements hook_user_delete().
 */
function inactive_users_user_delete($account) {
  _inactive_users_remove_contact($account);
}

/**
 * Implements hook_user_cancel().
 */
function inactive_users_user_cancel($edit, $account, $method) {
  // If 'Delete the account and its content' is selected,
  // inactive_users_user_delete() is called instead.
  switch ($method) {
    // Disable the account and keep its content.
    case 'user_cancel_block':
    // Disable the account and unpublish its content.
    case 'user_cancel_block_unpublish':
    // Delete the account and make its content belong to the Anonymous user
    case 'user_cancel_reassign':
      _inactive_users_remove_contact($account);
      break;
  }
}

/**
 * Remove associated CiviCRM contact for a Drupal account.
 *
 * @TODO Handle CiviCRM API failures properly (CiviCRM hands back an
 * array which if() won't catch). Use civicrm_api3() & trap
 * exceptions?
 */
function _inactive_users_remove_contact($account) {
  \Drupal::service('civicrm')->initialize();
  try {
    $civiContact = \Civi\Api4\UFMatch::get()
      ->addSelect('contact.display_name', 'contact_id')
      ->setJoin([
        ['Contact AS contact', FALSE, NULL],
      ])
      ->addWhere('contact.contact_type', '=', 'Individual')
      ->addWhere('uf_id', '=', $account->id())
      ->execute()
      ->first();

    if (!empty($civiContact['contact_id'])) {
      $delete = \Civi\Api4\Contact::delete()
        ->addWhere('id', '=', $civiContact['contact_id'])
        ->execute()
        ->count();
      if (!empty($delete)) {
        \Drupal::messenger()->addStatus(t('Contact %name has been deleted.', ['%name' => $civiContact['contact.display_name']]));
      }
    }
  }
  catch (Exception $e) {
    \Drupal::messenger()->addError(t('Unable to delete contact %name, error was: %message.', ['%message' => $e->getMessage(), '%name' => $civiContact['contact.display_name']]));
  }
}
